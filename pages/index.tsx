import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { useEffect, useState, useReducer } from "react";
import database from "../data/data.json";

import {
  createColumnHelper,
  flexRender,
  getCoreRowModel,
  useReactTable,
} from "@tanstack/react-table";

type Person = {
  id: number;
  name: string;
};

const columnHelper = createColumnHelper<Person>();

const columns = [
  columnHelper.accessor("id", {
    header: () => "Id",
    cell: (info) => info.renderValue(),
    footer: (info) => info.column.id,
  }),
  columnHelper.accessor("name", {
    header: () => "Name",
    cell: (info) => info.renderValue(),
    footer: (info) => info.column.id,
  }),
];

const Home: NextPage = () => {
  const [data, setData] = useState([...database]);
  const rerender = useReducer(() => ({}), {})[1];
  console.log("heres the data", data);

  const fetchData = (data: any) => {
    const dataJSON = JSON.stringify(data);
    console.log("fetch data");
    fetch("./api/hello", {
      method: "POST",
      body: dataJSON,
    });
  };

  useEffect(() => {}, []);

  const handleSubmit = (e: any) => {
    e.preventDefault();
    const element = document.getElementById("name-input") as HTMLInputElement;
    const name = element?.value;
    const data = [
      {
        id: Math.floor(Math.random() * 10),
        name: name,
      },
    ];
    fetchData(data);
    console.log(name);
  };

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
  });

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div>
        <form onSubmit={handleSubmit}>
          <label htmlFor="name-input"></label>
          <input type="text" id="name-input" name="name-input" />
          <button type="submit">Submit</button>
        </form>
      </div>

      {/*  */}

      <div>
        <table>
          <thead>
            {table.getHeaderGroups().map((headerGroup) => (
              <tr key={headerGroup.id}>
                {headerGroup.headers.map((header) => {
                  // console.log("header id:", header.id);
                  // console.log(
                  //   "header column column def:",
                  //   header.column.columnDef
                  // );
                  // console.log(header.getContext());

                  return (
                    <th key={header.id}>
                      {header.isPlaceholder
                        ? null
                        : flexRender(
                            header.column.columnDef.header,
                            header.getContext()
                          )}
                    </th>
                  );
                })}
              </tr>
            ))}
          </thead>
          <tbody>
            {table.getRowModel().rows.map((row) => (
              <tr key={row.id}>
                {row.getVisibleCells().map((cell) => {
                  //console.log("cell:", cell);
                  console.log("cell id:", cell.id);
                  console.log(cell.getValue());
                  return (
                    <td key={cell.id}>
                      {flexRender(
                        cell.column.columnDef.cell,
                        cell.getContext()
                      )}
                    </td>
                  );
                })}
              </tr>
            ))}
          </tbody>
          <tfoot>
            {table.getFooterGroups().map((footerGroup) => (
              <tr key={footerGroup.id}>
                {footerGroup.headers.map((header) => (
                  <th key={header.id}>
                    {header.isPlaceholder
                      ? null
                      : flexRender(
                          header.column.columnDef.footer,
                          header.getContext()
                        )}
                  </th>
                ))}
              </tr>
            ))}
          </tfoot>
        </table>
        <button onClick={() => rerender()} className="border p-2">
          Rerender
        </button>
      </div>
    </div>
  );
};

export default Home;
